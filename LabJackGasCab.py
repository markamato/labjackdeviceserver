#!/usr/bin/env python
# -*- coding:utf-8 -*-


# ############################################################################
#  license :
# ============================================================================
#
#  File :        LabJackGasCab.py
#
#  Project :     rareRF
#
# This file is part of Tango device class.
# 
# Tango is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# Tango is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Tango.  If not, see <http://www.gnu.org/licenses/>.
# 
#
#  $Author :      mark.amato$
#
#  $Revision :    $
#
#  $Date :        $
#
#  $HeadUrl :     $
# ============================================================================
#            This file is generated by POGO
#     (Program Obviously used to Generate tango Object)
# ############################################################################

__all__ = ["LabJackGasCab", "LabJackGasCabClass", "main"]

__docformat__ = 'restructuredtext'

import PyTango
import sys
# Add additional import
#----- PROTECTED REGION ID(LabJackGasCab.additionnal_import) ENABLED START -----#

import u3 #import EXOdriver and u3.py .
import scipy.interpolate  #import the interpolate function.
#----- PROTECTED REGION END -----#	//	LabJackGasCab.additionnal_import

# Device States Description
# No states for this device


class LabJackGasCab (PyTango.Device_4Impl):
    """This class defines the LabJack unit used for gas control and other IO control within the rareRF system."""
    
    # -------- Add you global variables here --------------------------
    #----- PROTECTED REGION ID(LabJackGasCab.global_variables) ENABLED START -----#
    
    
    #----- PROTECTED REGION END -----#	//	LabJackGasCab.global_variables

    def __init__(self, cl, name):
        PyTango.Device_4Impl.__init__(self,cl,name)
        self.debug_stream("In __init__()")
        LabJackGasCab.init_device(self)
        #----- PROTECTED REGION ID(LabJackGasCab.__init__) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	LabJackGasCab.__init__
        
    def delete_device(self):
        self.debug_stream("In delete_device()")
        #----- PROTECTED REGION ID(LabJackGasCab.delete_device) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	LabJackGasCab.delete_device

    def init_device(self):
        self.debug_stream("In init_device()")
        self.get_device_properties(self.get_device_class())
        self.attr_MFCPressureDemand_read = 0.0
        self.attr_BaratronPressure_read = 0.0
        self.attr_MFCFlowReadback_read = 0.0
        self.attr_DAC1Out_read = 0.0
        self.attr_AIN2_read = 0.0
        self.attr_AIN3_read = 0.0
        #----- PROTECTED REGION ID(LabJackGasCab.init_device) ENABLED START -----#
        # create the labjackobject
        self.labjack = u3.U3()
        # grab the calibration object
        self.calibrationData = self.labjack.getCalibrationData()
        # cool, set FIO0-3 as analog ins
        self.labjack.configIO(FIOAnalog = 15)
        
        # get cal constants
        print('initialising')
        self.DAC0Offset = self.calibrationData.get('dac0Offset')*256
        self.DAC0Slope  = self.calibrationData.get('dac0Slope')*256
        self.DAC1Offset = self.calibrationData.get('dac1Offset')*256
        self.DAC1Slope  = self.calibrationData.get('dac1Slope')*256
        self.hvAIN0Offset = self.calibrationData.get('hvAIN0Offset')
        self.hvAIN0Slope  = self.calibrationData.get('hvAIN0Slope')
        self.hvAIN1Offset = self.calibrationData.get('hvAIN1Offset')
        self.hvAIN1Slope  = self.calibrationData.get('hvAIN1Slope')
        self.hvAIN2Offset = self.calibrationData.get('hvAIN2Offset')
        self.hvAIN2Slope  = self.calibrationData.get('hvAIN2Slope')
        self.hvAIN3Offset = self.calibrationData.get('hvAIN3Offset')
        self.hvAIN3Slope  = self.calibrationData.get('hvAIN3Slope')
        self.set_state(PyTango.DevState.ON)
        #self.labjack.debug = True
        self.labjack.getFeedback(u3.DAC0_16(Value = 0))
        self.labjack.getFeedback(u3.DAC1_16(Value = 0))
        self.AIMS = scipy.interpolate.interp1d([2,2.5,3,3.2,3.4,3.6,3.8,4,4.2,4.4,4.6,4.8,5,5.2,5.4,5.6,5.8,6,6.2,6.4,6.6,6.8,7,7.2,7.4,7.6,7.8,8,8.2,8.4,8.6,8.8,9,9.2,9.4,9.6,9.8,9.9,10],[0.0000000075,0.000000018,0.000000044,0.000000061,0.000000083,0.00000011,0.00000016,0.00000022,0.0000003,0.00000041,0.00000055,0.00000074,0.00000098,0.0000013,0.0000017,0.0000021,0.0000027,0.0000034,0.0000042,0.0000052,0.0000063,0.0000075,0.000009,0.000011,0.000013,0.000015,0.000018,0.000022,0.000026,0.000032,0.000043,0.000059,0.00009,0.00014,0.00025,0.0005,0.0013,0.0027,0.0075])
        print self.AIMS(2.5)
	
		
        #----- PROTECTED REGION END -----#	//	LabJackGasCab.init_device

    def always_executed_hook(self):
        self.debug_stream("In always_excuted_hook()")
        #----- PROTECTED REGION ID(LabJackGasCab.always_executed_hook) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	LabJackGasCab.always_executed_hook

    # -------------------------------------------------------------------------
    #    LabJackGasCab read/write attribute methods
    # -------------------------------------------------------------------------
    
    def read_MFCPressureDemand(self, attr):
        self.debug_stream("In read_MFCPressureDemand()")
        #----- PROTECTED REGION ID(LabJackGasCab.MFCPressureDemand_read) ENABLED START -----#
        attr.set_value(self.attr_MFCPressureDemand_read)
        #----- PROTECTED REGION END -----#	//	LabJackGasCab.MFCPressureDemand_read
        
    def write_MFCPressureDemand(self, attr):
        self.debug_stream("In write_MFCPressureDemand()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(LabJackGasCab.MFCPressureDemand_write) ENABLED START -----#
        self.attr_MFCPressureDemand_read = data
	#TODO: stop hardcoding this and instead make it match the gauge
        zero_bound_value = int((self.DAC0Offset + self.DAC0Slope*data)/10)
        #print('mfc pressure data is ' + str(zero_bound_value)) 
               
        if zero_bound_value<0 :
            zero_bound_value = 0
        
        self.labjack.getFeedback(u3.DAC0_16(Value = zero_bound_value))
        #----- PROTECTED REGION END -----#	//	LabJackGasCab.MFCPressureDemand_write
        
    def read_BaratronPressure(self, attr):
        self.debug_stream("In read_BaratronPressure()")
        #----- PROTECTED REGION ID(LabJackGasCab.BaratronPressure_read) ENABLED START -----#
        
        #TODO: Add non hardcoded scalar for volts to torr
	
        baratronbits, = self.labjack.getFeedback(u3.AIN(0))
        self.attr_BaratronPressure_read = (self.hvAIN0Offset + self.hvAIN0Slope * baratronbits) * 10
        attr.set_value(self.attr_BaratronPressure_read)
        
        #----- PROTECTED REGION END -----#	//	LabJackGasCab.BaratronPressure_read
        
    def read_MFCFlowReadback(self, attr):
        self.debug_stream("In read_MFCFlowReadback()")
        #----- PROTECTED REGION ID(LabJackGasCab.MFCFlowReadback_read) ENABLED START -----#
        flowbits, = self.labjack.getFeedback(u3.AIN(1))
        self.attr_MFCFlowReadback_read = self.hvAIN1Offset + self.hvAIN1Slope * flowbits
        attr.set_value(self.attr_MFCFlowReadback_read)       
        #----- PROTECTED REGION END -----#	//	LabJackGasCab.MFCFlowReadback_read
        
    def read_DAC1Out(self, attr):
        self.debug_stream("In read_DAC1Out()")
        #----- PROTECTED REGION ID(LabJackGasCab.DAC1Out_read) ENABLED START -----#
        attr.set_value(self.attr_DAC1Out_read)
        #DAC1Offset = self.calibrationData.get('dac1Offset')*256
        #DAC1Slope  = self.calibrationData.get('dac1Slope')*256
        #self.labjack.getFeedback(u3.DAC1_16(Value = hex(int(DAC1Offset + DAC1Slope*self.attr_MFCPressureDemand_read))        
        #----- PROTECTED REGION END -----#	//	LabJackGasCab.DAC1Out_read
        
    def write_DAC1Out(self, attr):
        self.debug_stream("In write_DAC1Out()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(LabJackGasCab.DAC1Out_write) ENABLED START -----#
        self.attr_DAC1Out_read = data

        self.labjack.getFeedback(u3.DAC1_16(Value = int(self.DAC1Offset + self.DAC1Slope*data)))
        #----- PROTECTED REGION END -----#	//	LabJackGasCab.DAC1Out_write
        
    def read_AIN2(self, attr):
        self.debug_stream("In read_AIN2()")
        #----- PROTECTED REGION ID(LabJackGasCab.AIN2_read) ENABLED START -----#

        ain2bits, = self.labjack.getFeedback(u3.AIN(2))
        self.attr_AIN2_read = self.hvAIN2Offset + self.hvAIN2Slope * ain2bits
        attr.set_value(self.attr_AIN2_read)
        

        #----- PROTECTED REGION END -----#	//	LabJackGasCab.AIN2_read
        
    def read_AIN3(self, attr):
        self.debug_stream("In read_AIN3()")
        #----- PROTECTED REGION ID(LabJackGasCab.AIN3_read) ENABLED START -----#
        ain3bits, = self.labjack.getFeedback(u3.AIN(3))
        inputvoltage = self.hvAIN3Offset + self.hvAIN3Slope * ain3bits
        self.attr_AIN3_read = self.AIMS(inputvoltage)
        attr.set_value(self.attr_AIN3_read)
        
        #----- PROTECTED REGION END -----#	//	LabJackGasCab.AIN3_read
        
    
    
            
    def read_attr_hardware(self, data):
        self.debug_stream("In read_attr_hardware()")
        #----- PROTECTED REGION ID(LabJackGasCab.read_attr_hardware) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	LabJackGasCab.read_attr_hardware


    # -------------------------------------------------------------------------
    #    LabJackGasCab command methods
    # -------------------------------------------------------------------------
    

    #----- PROTECTED REGION ID(LabJackGasCab.programmer_methods) ENABLED START -----#
	
    #----- PROTECTED REGION END -----#	//	LabJackGasCab.programmer_methods

class LabJackGasCabClass(PyTango.DeviceClass):
    # -------- Add you global class variables here --------------------------
    #----- PROTECTED REGION ID(LabJackGasCab.global_class_variables) ENABLED START -----#
    
    #----- PROTECTED REGION END -----#	//	LabJackGasCab.global_class_variables


    #    Class Properties
    class_property_list = {
        }


    #    Device Properties
    device_property_list = {
        }


    #    Command definitions
    cmd_list = {
        }


    #    Attribute definitions
    attr_list = {
        'MFCPressureDemand':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE]],
        'BaratronPressure':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'Polling period': "500",
                'archive_period': "1000",
            } ],
        'MFCFlowReadback':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'Polling period': "500",
                'archive_period': "1000",
            } ],
        'DAC1Out':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE]],
        'AIN2':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'Polling period': "3000",
                'archive_period': "1000",
            } ],
        'AIN3':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'Polling period': "3000",
                'archive_period': "1000",
            } ],
        }


def main():
    try:
        py = PyTango.Util(sys.argv)
        py.add_class(LabJackGasCabClass, LabJackGasCab, 'LabJackGasCab')
        #----- PROTECTED REGION ID(LabJackGasCab.add_classes) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	LabJackGasCab.add_classes

        U = PyTango.Util.instance()
        U.server_init()
        U.server_run()

    except PyTango.DevFailed as e:
        print ('-------> Received a DevFailed exception:', e)
    except Exception as e:
        print ('-------> An unforeseen exception occured....', e)

if __name__ == '__main__':
    main()
